-- Questão 1: Atualizar débitos vencidos e não 'Negociado' nem 'Pago' para 'Atrasado'

UPDATE DEBITOS d SET SITUACAO_DEBITO = 'Atrasado'
 WHERE d.DATAVENCIMENTO < CURRENT_DATE
   AND SITUACAO_DEBITO NOT IN ('Negociado', 'Pago');
   
-- Questão 2: Atualizar débitos não vencidos e não 'Pago' para 'Pendente'
 
UPDATE DEBITOS d SET SITUACAO_DEBITO = 'Pendente'
 WHERE d.DATAVENCIMENTO > CURRENT_DATE
 AND SITUACAO_DEBITO NOT IN ('Pago');
 
-- Questão 3: Atualizar data de vencimento de débitos 'Negociado' para 5 anos atrás
 UPDATE DEBITOS d SET SITUACAO_DEBITO = DATEADD(-5 YEAR TO d.DATAVENCIMENTO)
 WHERE SITUACAO_DEBITO = 'Negociado';
 
-- Questão 4: Selecionar nome, e-mail e telefone de todas as pessoas
 
 SELECT p.NOME, p.EMAIL, p.TELEFONE 
   FROM PESSOA p;
   
-- Questão 5: Listar produtos com preço unitário acima de R$ 100
   
 SELECT p.PRECO_UNITARIO, p.NOME 
   FROM PRODUTO p 
  WHERE PRECO_UNITARIO > 100;
  
-- Questão 6: Retornar todas as vendas realizadas em uma determinada data
 
 SELECT v.*
 FROM VENDA v
 WHERE v.DATA_VENDA >= '2023-05-10';
 
-- Questão 7: Mostrar nome, data de nascimento e idade de fornecedores sem produtos em estoque

SELECT p.NOME, p.DATA_NASCIMENTO,
EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM p.DATA_NASCIMENTO) AS idade
   FROM FORNECEDOR f
   LEFT JOIN PESSOA p ON p.ID_PESSOA = f.ID_PESSOA
   LEFT JOIN PRODUTO pr ON pr.ID_FORNECEDOR = f.ID_FORNECEDOR
   WHERE pr.ID_FORNECEDOR IS NULL OR pr.QUANTIDADE_ESTOQUE = 0;

-- Questão 8: Listar clientes que já realizaram compras com débitos vencidos

SELECT p.NOME
  FROM CLIENTE c
  LEFT JOIN PESSOA p ON p.ID_PESSOA = c.ID_PESSOA 
  LEFT JOIN VENDA v ON c.ID_PESSOA = v.ID_PESSOA 
  LEFT JOIN DEBITOS d ON v.ID_VENDA = d.ID_VENDA 
  WHERE d.DATAVENCIMENTO < CURRENT_DATE
  GROUP BY p.NOME;

-- Questão 10: Selecionar os 10 maiores devedores com soma total de débitos vencidos e pagos

 SELECT FIRST 10 d.ID_CLIENTE, p.NOME,
		(EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM p.DATA_NASCIMENTO)) AS IDADE,
		(SELECT SUM(d2.VALOR_TOTAL)
      	   FROM DEBITOS d2
      	   WHERE d2.ID_CLIENTE = d.ID_CLIENTE 
      	   AND d2.DATAVENCIMENTO < CURRENT_DATE) AS DEBITO_VENCIDO,
      	COALESCE ((SELECT SUM(d3.VALOR_TOTAL)
      	   FROM DEBITOS d3
      	   WHERE d3.ID_CLIENTE = d.ID_CLIENTE 
       	   AND d3.SITUACAO_DEBITO = 'Pago'), 0) AS DEBITO_PAGO
FROM DEBITOS d
LEFT JOIN CLIENTE c ON c.ID_CLIENTE = d.ID_CLIENTE 
LEFT JOIN PESSOA p ON p.ID_PESSOA = c.ID_PESSOA
GROUP BY d.ID_CLIENTE, p.NOME, IDADE
ORDER BY DEBITO_VENCIDO DESC
 
-- Questão 11: Atualizar o preço unitário dos produtos com estoque inferior a 10 para mais 10%

UPDATE PRODUTO p SET PRECO_UNITARIO = PRECO_UNITARIO * 1.10
  WHERE p.PRECO_UNITARIO < 10;

-- Questão 13: Alterar todos os débitos com situação 'Atrasado' para 'Pagos'

UPDATE DEBITOS d 
   SET d.SITUACAO_DEBITO = 'Pagos' 
 WHERE d.ID_VENDA IN (SELECT p.ID_VENDA FROM PAGAMENTO p ) 
   AND d.SITUACAO_DEBITO = 'Atrasado';

-- 15: Selecionar as vendas entre dezembro de 2023 e janeiro de 2024

  SELECT * 
    FROM VENDA v 
   WHERE v.DATA_VENDA BETWEEN '2023-12-1' AND '2024-01-31';
   
 --16: Listar os produtos com estoque entre 5 e 20 unidades

   SELECT *
     FROM PRODUTO p 
    WHERE p.QUANTIDADE_ESTOQUE BETWEEN '5' AND '20';
   
 --17: Retornar todas as pessoas com nomes que começam com 'A'
    
    SELECT *
    FROM PESSOA p 
    WHERE p.nome LIKE 'A%';
    
 --18: Selecionar os produtos que não foram vendidos
   
   SELECT p.nome, p.DESCRICAO, p.QUANTIDADE_ESTOQUE 
     FROM PRODUTO p 
    WHERE p.ID_PRODUTO NOT IN (SELECT i.ID_PRODUTO FROM ITENSVENDA i) 
    
 --19: Listar produtos vendidos para os clientes 'Carla Souza' e 'Larissa Ferreira'
    
   SELECT pe.NOME
     FROM ITENSVENDA i
     LEFT JOIN PRODUTO p ON p.ID_PRODUTO = i.ID_PRODUTO
     LEFT JOIN VENDA v ON v.ID_VENDA = i.ID_VENDA 
     LEFT JOIN PESSOA pe ON pe.ID_PESSOA = v.ID_PESSOA 
     WHERE pe.NOME IN ('Carla Souza', 'Larissa Ferreira');
     
 --20: Mostrar pessoas que são clientes OU fornecedores
    
    SELECT p.NOME
      FROM PESSOA p 
     WHERE p.ID_PESSOA IN(SELECT c.ID_PESSOA FROM CLIENTE c) 
     OR p.ID_PESSOA IN(SELECT f.ID_PESSOA FROM FORNECEDOR f);
     
--21: Retornar todas as informações da venda com detalhes do cliente e forma de pagamento
    
   SELECT v.*, p.NOME AS cliente_nome, fp.DESCRICAO AS forma_pagamento
     FROM VENDA v  
     LEFT JOIN PESSOA p ON p.ID_PESSOA = v.ID_PESSOA 
     LEFT JOIN FORMA_PAGAMENTO fp ON fp.ID_FORMA_PAGAMENTO = v.ID_FORMA_PAGAMENTO;
     
--22: Mostrar todas as compras de um produto específico ('Placa de Captura')
    
   SELECT P.NOME, P.DESCRICAO, P.PRECO_UNITARIO, V.DATA_VENDA, V.VALOR_TOTAL, I.QUANTIDADE 
     FROM ITENSVENDA i 
     LEFT JOIN Produto p ON p.ID_PRODUTO = i.ID_PRODUTO 
	 LEFT JOIN VENDA v ON v.ID_VENDA = i.ID_VENDA 
    WHERE p.NOME = 'Placa de Captura';
    
 --23: Combinar nomes de fornecedores com nomes de clientes que irão fazer 25 anos em 2025
   
	SELECT CAST('Cliente' AS varchar(10)) AS tipo, p.NOME, p.ID_PESSOA, (2025 - EXTRACT(YEAR FROM p.DATA_NASCIMENTO))
	  FROM PESSOA p 
	 INNER JOIN CLIENTE c ON c.ID_PESSOA = p.ID_PESSOA
	 UNION
	SELECT CAST('Fornecedor' AS varchar(10)) AS tipo, p2.NOME, p2.ID_PESSOA, (2025 - EXTRACT(YEAR FROM p2.DATA_NASCIMENTO))
	  FROM FORNECEDOR f 
	 INNER JOIN PESSOA p2 ON p2.ID_PESSOA = f.ID_PESSOA
   
 --24: Retornar todos os logradouros e bairros, indicando se pertencem ou não a uma pessoa
   
	SELECT b.CEP, b.ID_MUNICIPIO, l.NOME, p.NOME
	  FROM ENDERECO e 
	  LEFT JOIN BAIRRO b ON b.ID_BAIRRO = e.ID_BAIRRO 
	  LEFT JOIN LOGRADOURO l ON l.ID_LOGRADOURO = e.ID_LOGRADOURO
	  LEFT JOIN PESSOA p ON p.ID_PESSOA = e.ID_PESSOA;
	  
--25: Selecionar os produtos que têm preço unitário superior à média
	  
	SELECT p.NOME, p.PRECO_UNITARIO, p.DESCRICAO 
      FROM PRODUTO p
     WHERE p.PRECO_UNITARIO  > (
    SELECT AVG(p.PRECO_UNITARIO)
      FROM PRODUTO p
);

--26: Listar clientes que fizeram compras em cidades com mais de 1 milhão de habitantes 
	SELECT DISTINCT p.NOME 
      FROM ENDERECO e
      LEFT JOIN PESSOA p ON p.ID_PESSOA = e.ID_PESSOA
      LEFT JOIN MUNICIPIO m ON m.ID_MUNICIPIO = e.ID_MUNICIPIO 
     WHERE m.populacao > 1000000;

--27: Mostre a quantidade de produtos vendidos por fonercedor 
    
    SELECT p2.NOME, SUM(QUANTIDADE_ESTOQUE)
      FROM PRODUTO p 
      LEFT JOIN FORNECEDOR f ON f.ID_FORNECEDOR = p.ID_FORNECEDOR 
      LEFT JOIN PESSOA p2 ON p2.ID_PESSOA = f.ID_PESSOA 
      GROUP BY p2.NOME;
      
--28: Listar os clientes que realizaram compras com valor total superior a R$500
      
   SELECT p.NOME , v.VALOR_TOTAL 
     FROM CLIENTE c 
     LEFT JOIN PESSOA p ON p.ID_PESSOA = c.ID_PESSOA 
     LEFT JOIN VENDA v ON v.ID_PESSOA = p.ID_PESSOA 
    WHERE v.VALOR_TOTAL > 500;
  
--29: Retornar todas as pessoas e seus endereços
   
   SELECT p.NOME, m.NOME AS cidade, b.NOME AS bairro, l.NOME AS rua
     FROM ENDERECO e 
     LEFT JOIN BAIRRO b ON b.ID_BAIRRO = e.ID_BAIRRO 
     LEFT JOIN MUNICIPIO m ON m.ID_MUNICIPIO = e.ID_MUNICIPIO 
     LEFT JOIN LOGRADOURO l ON l.ID_LOGRADOURO = e.ID_LOGRADOURO 
     LEFT JOIN PESSOA p ON p.ID_PESSOA = e.ID_PESSOA;
  
--30: Liste o produto, juntamente a seus preços e o nome for fornecedor, mesmo que não tenha
   SELECT p.nome AS produto, p2.NOME AS fornecedor, p.PRECO_UNITARIO 
	 FROM PRODUTO p 
	 LEFT JOIN FORNECEDOR f ON f.ID_FORNECEDOR = p.ID_FORNECEDOR 
	 LEFT JOIN PESSOA p2 ON p2.ID_PESSOA = f.ID_PESSOA 
    
--31: Liste os produtos em ordem decrescente de quantidade em estoque 
    
    SELECT p.NOME, p.QUANTIDADE_ESTOQUE 
	  FROM PRODUTO p 
  ORDER BY p.QUANTIDADE_ESTOQUE DESC
  
--32: Retorne as vendas em ordem crescente de valor total
  
  SELECT v.*
  	FROM VENDA v 
ORDER BY v.VALOR_TOTAL ASC 

--33: Listar os produtos com quantidade em estoque menor que a média de todos os produtos
 
  SELECT p.NOME , p.QUANTIDADE_ESTOQUE 
	FROM PRODUTO p
	WHERE p.QUANTIDADE_ESTOQUE =(SELECT AVG(p2.QUANTIDADE_ESTOQUE) FROM PRODUTO p2)
	
--34: Selecionar todas as pessoas cujo número de telefone é igual a de outra pessoa
	
	SELECT p.NOME, p.TELEFONE 
	FROM PESSOA p 
	WHERE p.TELEFONE IN ( SELECT p2.TELEFONE FROM PESSOA p2 WHERE p.ID_PESSOA != p2.ID_PESSOA )

--35: Aumentar em 10% o preço unitário de fornecedores de São Paulo
	
	UPDATE PRODUTO p 
	SET p.PRECO_UNITARIO = p.PRECO_UNITARIO * 1.10
WHERE p.ID_FORNECEDOR IN (
        SELECT f.ID_FORNECEDOR
        FROM FORNECEDOR f
        JOIN PESSOA pe ON f.ID_PESSOA = pe.ID_PESSOA
        JOIN ENDERECO e ON pe.ID_PESSOA = e.ID_PESSOA
        JOIN MUNICIPIO m ON e.ID_MUNICIPIO = m.ID_MUNICIPIO
        WHERE m.UF = 'SP'
    );
	
--36: Listar todas as vendas com status de débito igual a "Negociado"
	
	SELECT v.*
	FROM VENDA v
	LEFT JOIN DEBITOS d ON d.ID_VENDA = v.ID_VENDA 
	WHERE d.SITUACAO_DEBITO = 'Negociando'